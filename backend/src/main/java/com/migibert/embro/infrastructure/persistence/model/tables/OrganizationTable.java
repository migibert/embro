/*
 * This file is generated by jOOQ.
 */
package com.migibert.embro.infrastructure.persistence.model.tables;


import com.migibert.embro.infrastructure.persistence.model.Keys;
import com.migibert.embro.infrastructure.persistence.model.Public;
import com.migibert.embro.infrastructure.persistence.model.tables.SeniorityTable.SeniorityPath;
import com.migibert.embro.infrastructure.persistence.model.tables.SkillTable.SkillPath;
import com.migibert.embro.infrastructure.persistence.model.tables.TeamTable.TeamPath;
import com.migibert.embro.infrastructure.persistence.model.tables.UserOrganizationTable.UserOrganizationPath;
import com.migibert.embro.infrastructure.persistence.model.tables.records.OrganizationRecord;

import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OrganizationTable extends TableImpl<OrganizationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.organization</code>
     */
    public static final OrganizationTable ORGANIZATION = new OrganizationTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganizationRecord> getRecordType() {
        return OrganizationRecord.class;
    }

    /**
     * The column <code>public.organization.id</code>.
     */
    public final TableField<OrganizationRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.organization.name</code>.
     */
    public final TableField<OrganizationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private OrganizationTable(Name alias, Table<OrganizationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private OrganizationTable(Name alias, Table<OrganizationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.organization</code> table reference
     */
    public OrganizationTable(String alias) {
        this(DSL.name(alias), ORGANIZATION);
    }

    /**
     * Create an aliased <code>public.organization</code> table reference
     */
    public OrganizationTable(Name alias) {
        this(alias, ORGANIZATION);
    }

    /**
     * Create a <code>public.organization</code> table reference
     */
    public OrganizationTable() {
        this(DSL.name("organization"), null);
    }

    public <O extends Record> OrganizationTable(Table<O> path, ForeignKey<O, OrganizationRecord> childPath, InverseForeignKey<O, OrganizationRecord> parentPath) {
        super(path, childPath, parentPath, ORGANIZATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OrganizationPath extends OrganizationTable implements Path<OrganizationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OrganizationPath(Table<O> path, ForeignKey<O, OrganizationRecord> childPath, InverseForeignKey<O, OrganizationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OrganizationPath(Name alias, Table<OrganizationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OrganizationPath as(String alias) {
            return new OrganizationPath(DSL.name(alias), this);
        }

        @Override
        public OrganizationPath as(Name alias) {
            return new OrganizationPath(alias, this);
        }

        @Override
        public OrganizationPath as(Table<?> alias) {
            return new OrganizationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<OrganizationRecord> getPrimaryKey() {
        return Keys.ORGANIZATION_PKEY;
    }

    private transient SeniorityPath _seniority;

    /**
     * Get the implicit to-many join path to the <code>public.seniority</code>
     * table
     */
    public SeniorityPath seniority() {
        if (_seniority == null)
            _seniority = new SeniorityPath(this, null, Keys.SENIORITY__FK_SENIORITY_ORGANIZATION.getInverseKey());

        return _seniority;
    }

    private transient SkillPath _skill;

    /**
     * Get the implicit to-many join path to the <code>public.skill</code> table
     */
    public SkillPath skill() {
        if (_skill == null)
            _skill = new SkillPath(this, null, Keys.SKILL__FK_SKILL_ORGANIZATION.getInverseKey());

        return _skill;
    }

    private transient TeamPath _team;

    /**
     * Get the implicit to-many join path to the <code>public.team</code> table
     */
    public TeamPath team() {
        if (_team == null)
            _team = new TeamPath(this, null, Keys.TEAM__FK_TEAM_ORGANIZATION.getInverseKey());

        return _team;
    }

    private transient UserOrganizationPath _userOrganization;

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_organization</code> table
     */
    public UserOrganizationPath userOrganization() {
        if (_userOrganization == null)
            _userOrganization = new UserOrganizationPath(this, null, Keys.USER_ORGANIZATION__FK_USER_ORGANIZATION.getInverseKey());

        return _userOrganization;
    }

    @Override
    public OrganizationTable as(String alias) {
        return new OrganizationTable(DSL.name(alias), this);
    }

    @Override
    public OrganizationTable as(Name alias) {
        return new OrganizationTable(alias, this);
    }

    @Override
    public OrganizationTable as(Table<?> alias) {
        return new OrganizationTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationTable rename(String name) {
        return new OrganizationTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationTable rename(Name name) {
        return new OrganizationTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationTable rename(Table<?> name) {
        return new OrganizationTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationTable where(Condition condition) {
        return new OrganizationTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
