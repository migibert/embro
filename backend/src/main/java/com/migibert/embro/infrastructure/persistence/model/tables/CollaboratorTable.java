/*
 * This file is generated by jOOQ.
 */
package com.migibert.embro.infrastructure.persistence.model.tables;


import com.migibert.embro.infrastructure.persistence.model.Keys;
import com.migibert.embro.infrastructure.persistence.model.Public;
import com.migibert.embro.infrastructure.persistence.model.tables.CollaboratorSkillTable.CollaboratorSkillPath;
import com.migibert.embro.infrastructure.persistence.model.tables.OrganizationTable.OrganizationPath;
import com.migibert.embro.infrastructure.persistence.model.tables.SkillTable.SkillPath;
import com.migibert.embro.infrastructure.persistence.model.tables.TeamCollaboratorTable.TeamCollaboratorPath;
import com.migibert.embro.infrastructure.persistence.model.tables.TeamTable.TeamPath;
import com.migibert.embro.infrastructure.persistence.model.tables.records.CollaboratorRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CollaboratorTable extends TableImpl<CollaboratorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.collaborator</code>
     */
    public static final CollaboratorTable COLLABORATOR = new CollaboratorTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CollaboratorRecord> getRecordType() {
        return CollaboratorRecord.class;
    }

    /**
     * The column <code>public.collaborator.id</code>.
     */
    public final TableField<CollaboratorRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.collaborator.organization_id</code>.
     */
    public final TableField<CollaboratorRecord, UUID> ORGANIZATION_ID = createField(DSL.name("organization_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.collaborator.email</code>.
     */
    public final TableField<CollaboratorRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.collaborator.firstname</code>.
     */
    public final TableField<CollaboratorRecord, String> FIRSTNAME = createField(DSL.name("firstname"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.collaborator.lastname</code>.
     */
    public final TableField<CollaboratorRecord, String> LASTNAME = createField(DSL.name("lastname"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.collaborator.role</code>.
     */
    public final TableField<CollaboratorRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.collaborator.birth_date</code>.
     */
    public final TableField<CollaboratorRecord, LocalDate> BIRTH_DATE = createField(DSL.name("birth_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.collaborator.start_date</code>.
     */
    public final TableField<CollaboratorRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.collaborator.seniority_name</code>.
     */
    public final TableField<CollaboratorRecord, String> SENIORITY_NAME = createField(DSL.name("seniority_name"), SQLDataType.VARCHAR(100), this, "");

    private CollaboratorTable(Name alias, Table<CollaboratorRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CollaboratorTable(Name alias, Table<CollaboratorRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.collaborator</code> table reference
     */
    public CollaboratorTable(String alias) {
        this(DSL.name(alias), COLLABORATOR);
    }

    /**
     * Create an aliased <code>public.collaborator</code> table reference
     */
    public CollaboratorTable(Name alias) {
        this(alias, COLLABORATOR);
    }

    /**
     * Create a <code>public.collaborator</code> table reference
     */
    public CollaboratorTable() {
        this(DSL.name("collaborator"), null);
    }

    public <O extends Record> CollaboratorTable(Table<O> path, ForeignKey<O, CollaboratorRecord> childPath, InverseForeignKey<O, CollaboratorRecord> parentPath) {
        super(path, childPath, parentPath, COLLABORATOR);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CollaboratorPath extends CollaboratorTable implements Path<CollaboratorRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CollaboratorPath(Table<O> path, ForeignKey<O, CollaboratorRecord> childPath, InverseForeignKey<O, CollaboratorRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CollaboratorPath(Name alias, Table<CollaboratorRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CollaboratorPath as(String alias) {
            return new CollaboratorPath(DSL.name(alias), this);
        }

        @Override
        public CollaboratorPath as(Name alias) {
            return new CollaboratorPath(alias, this);
        }

        @Override
        public CollaboratorPath as(Table<?> alias) {
            return new CollaboratorPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CollaboratorRecord> getPrimaryKey() {
        return Keys.COLLABORATOR_PKEY;
    }

    @Override
    public List<ForeignKey<CollaboratorRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COLLABORATOR__FK_COLLABORATOR_ORGANIZATION);
    }

    private transient OrganizationPath _organization;

    /**
     * Get the implicit join path to the <code>public.organization</code> table.
     */
    public OrganizationPath organization() {
        if (_organization == null)
            _organization = new OrganizationPath(this, Keys.COLLABORATOR__FK_COLLABORATOR_ORGANIZATION, null);

        return _organization;
    }

    private transient CollaboratorSkillPath _collaboratorSkill;

    /**
     * Get the implicit to-many join path to the
     * <code>public.collaborator_skill</code> table
     */
    public CollaboratorSkillPath collaboratorSkill() {
        if (_collaboratorSkill == null)
            _collaboratorSkill = new CollaboratorSkillPath(this, null, Keys.COLLABORATOR_SKILL__FK_COLLABORATOR_SKILL_COLLABORATOR.getInverseKey());

        return _collaboratorSkill;
    }

    private transient TeamCollaboratorPath _teamCollaborator;

    /**
     * Get the implicit to-many join path to the
     * <code>public.team_collaborator</code> table
     */
    public TeamCollaboratorPath teamCollaborator() {
        if (_teamCollaborator == null)
            _teamCollaborator = new TeamCollaboratorPath(this, null, Keys.TEAM_COLLABORATOR__FK_TEAM_COLLABORATOR_COLLABORATOR.getInverseKey());

        return _teamCollaborator;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.skill</code>
     * table
     */
    public SkillPath skill() {
        return collaboratorSkill().skill();
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.team</code>
     * table
     */
    public TeamPath team() {
        return teamCollaborator().team();
    }

    @Override
    public CollaboratorTable as(String alias) {
        return new CollaboratorTable(DSL.name(alias), this);
    }

    @Override
    public CollaboratorTable as(Name alias) {
        return new CollaboratorTable(alias, this);
    }

    @Override
    public CollaboratorTable as(Table<?> alias) {
        return new CollaboratorTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CollaboratorTable rename(String name) {
        return new CollaboratorTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CollaboratorTable rename(Name name) {
        return new CollaboratorTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CollaboratorTable rename(Table<?> name) {
        return new CollaboratorTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CollaboratorTable where(Condition condition) {
        return new CollaboratorTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CollaboratorTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CollaboratorTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CollaboratorTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CollaboratorTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CollaboratorTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CollaboratorTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CollaboratorTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CollaboratorTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CollaboratorTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
