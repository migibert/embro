/*
 * This file is generated by jOOQ.
 */
package com.migibert.embro.infrastructure.persistence.model.tables;


import com.migibert.embro.infrastructure.persistence.model.Keys;
import com.migibert.embro.infrastructure.persistence.model.Public;
import com.migibert.embro.infrastructure.persistence.model.tables.CollaboratorSkillTable.CollaboratorSkillPath;
import com.migibert.embro.infrastructure.persistence.model.tables.CollaboratorTable.CollaboratorPath;
import com.migibert.embro.infrastructure.persistence.model.tables.OrganizationTable.OrganizationPath;
import com.migibert.embro.infrastructure.persistence.model.tables.records.SkillRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SkillTable extends TableImpl<SkillRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.skill</code>
     */
    public static final SkillTable SKILL = new SkillTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SkillRecord> getRecordType() {
        return SkillRecord.class;
    }

    /**
     * The column <code>public.skill.id</code>.
     */
    public final TableField<SkillRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.skill.organization_id</code>.
     */
    public final TableField<SkillRecord, UUID> ORGANIZATION_ID = createField(DSL.name("organization_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.skill.name</code>.
     */
    public final TableField<SkillRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private SkillTable(Name alias, Table<SkillRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SkillTable(Name alias, Table<SkillRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.skill</code> table reference
     */
    public SkillTable(String alias) {
        this(DSL.name(alias), SKILL);
    }

    /**
     * Create an aliased <code>public.skill</code> table reference
     */
    public SkillTable(Name alias) {
        this(alias, SKILL);
    }

    /**
     * Create a <code>public.skill</code> table reference
     */
    public SkillTable() {
        this(DSL.name("skill"), null);
    }

    public <O extends Record> SkillTable(Table<O> path, ForeignKey<O, SkillRecord> childPath, InverseForeignKey<O, SkillRecord> parentPath) {
        super(path, childPath, parentPath, SKILL);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SkillPath extends SkillTable implements Path<SkillRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SkillPath(Table<O> path, ForeignKey<O, SkillRecord> childPath, InverseForeignKey<O, SkillRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SkillPath(Name alias, Table<SkillRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SkillPath as(String alias) {
            return new SkillPath(DSL.name(alias), this);
        }

        @Override
        public SkillPath as(Name alias) {
            return new SkillPath(alias, this);
        }

        @Override
        public SkillPath as(Table<?> alias) {
            return new SkillPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SkillRecord> getPrimaryKey() {
        return Keys.SKILL_PKEY;
    }

    @Override
    public List<ForeignKey<SkillRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SKILL__FK_SKILL_ORGANIZATION);
    }

    private transient OrganizationPath _organization;

    /**
     * Get the implicit join path to the <code>public.organization</code> table.
     */
    public OrganizationPath organization() {
        if (_organization == null)
            _organization = new OrganizationPath(this, Keys.SKILL__FK_SKILL_ORGANIZATION, null);

        return _organization;
    }

    private transient CollaboratorSkillPath _collaboratorSkill;

    /**
     * Get the implicit to-many join path to the
     * <code>public.collaborator_skill</code> table
     */
    public CollaboratorSkillPath collaboratorSkill() {
        if (_collaboratorSkill == null)
            _collaboratorSkill = new CollaboratorSkillPath(this, null, Keys.COLLABORATOR_SKILL__FK_COLLABORATOR_SKILL_SKILL.getInverseKey());

        return _collaboratorSkill;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.collaborator</code> table
     */
    public CollaboratorPath collaborator() {
        return collaboratorSkill().collaborator();
    }

    @Override
    public SkillTable as(String alias) {
        return new SkillTable(DSL.name(alias), this);
    }

    @Override
    public SkillTable as(Name alias) {
        return new SkillTable(alias, this);
    }

    @Override
    public SkillTable as(Table<?> alias) {
        return new SkillTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SkillTable rename(String name) {
        return new SkillTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SkillTable rename(Name name) {
        return new SkillTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SkillTable rename(Table<?> name) {
        return new SkillTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SkillTable where(Condition condition) {
        return new SkillTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SkillTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SkillTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SkillTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SkillTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SkillTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SkillTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SkillTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SkillTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SkillTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
